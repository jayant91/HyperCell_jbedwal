package HyperCell

import Chisel._
import java.io._
import scala.io.Source

class controllerTopTest(c: controllerTop) extends Tester(c){
	val fileName	: String	="Config_2.txt"
	
	var config	: Long 		= 0
	var nline 	: String	= null
	
	val fileReader			= new FileReader(fileName)
	
	val bufferedReader 		= new BufferedReader(fileReader)
	
	for(i<-0 until 20){
		poke(c.io.fabInRdy(i), 0x1)
		poke(c.io.fabOutValid(i), 0x1)
		poke(c.io.fabOut(i), 0xa432)
	}
	poke(c.io.inValid, 0x1)
	poke(c.io.loadRqstRdy, 0x1)
	poke(c.io.loadResp, 0x4535)
	poke(c.io.loadRespValid, 0x0)
	poke(c.io.storeMemRdy, 0x1)
	for(i<-0 until 6){
		poke(c.io.outRdy(i), 0x1)
	}
		
	for(i<-0 until 81){
		nline	= bufferedReader.readLine()
		config	= java.lang.Long.parseLong(nline, 16)  
		
		poke(c.io.inConfig, config)
		
		peek(c.mainConfigClass.io.configData)
		peek(c.mainConfigClass.io.configDataValid)
		
		peek(c.fabConfigClass.io.inConfig)
		peek(c.fabConfigClass.io.outConfig)
		
		for(j<-0 until 6){
			peek(c.fabConfigClass.fabricConfigureClass(j).configValid)
			peek(c.fabConfigClass.fabricConfigureClass(j).inDataReg)
			peek(c.fabConfigClass.fabricConfigureClass(j).outDataReg)
	
		}
		
		peek(c.loadSeqClass.io.inConfig)
		peek(c.loadSeqClass.io.inValid)
		
		peek(c.loadSeqClass.loadCtrlClass.prologueDepth)
		peek(c.loadSeqClass.loadCtrlClass.epilogueDepth)	
		peek(c.loadSeqClass.loadCtrlClass.steadyStateDepth)
		peek(c.loadSeqClass.loadCtrlClass.epilogueSpill)
		peek(c.loadSeqClass.loadCtrlClass.iterCount)	
		
	
		peek(c.loadSeqClass.loadDPClass.loadSeqMemConfig.io.memData)
		peek(c.loadSeqClass.loadDPClass.loadSeqMemConfig.io.memAddr)
		peek(c.loadSeqClass.loadDPClass.loadSeqMemConfig.io.memOutValid)		
//		for(j<-0 until 10){
//			peek(c.loadSeqClass.loadDPClass.loadSeqMem(j))
//		}

		peek(c.loadSeqClass.loadDPClass.regLkupMemConfig.io.memData)
		peek(c.loadSeqClass.loadDPClass.regLkupMemConfig.io.memAddr)
		peek(c.loadSeqClass.loadDPClass.regLkupMemConfig.io.memOutValid)
		
		peek(c.loadSeqClass.loadDPClass.baseAddrMemConfig.io.memData)
		peek(c.loadSeqClass.loadDPClass.baseAddrMemConfig.io.memAddr)
		peek(c.loadSeqClass.loadDPClass.baseAddrMemConfig.io.memOutValid)
		
		peek(c.loadSeqClass.loadDPClass.loopOffsetMemConfig.io.memData)
		peek(c.loadSeqClass.loadDPClass.loopOffsetMemConfig.io.memAddr)
		peek(c.loadSeqClass.loadDPClass.loopOffsetMemConfig.io.memOutValid)
		
		peek(c.loadSeqClass.loadDPClass.spillOffsetMemConfig.io.memData)
		peek(c.loadSeqClass.loadDPClass.spillOffsetMemConfig.io.memAddr)
		peek(c.loadSeqClass.loadDPClass.spillOffsetMemConfig.io.memOutValid)
		
		
		peek(c.fabInSeqClass.io.inConfig)
		peek(c.fabInSeqClass.io.inValid)
		
		peek(c.fabInSeqClass.ctrlClass.prologueDepth)
		peek(c.fabInSeqClass.ctrlClass.epilogueDepth)	
		peek(c.fabInSeqClass.ctrlClass.steadyStateDepth)
		peek(c.fabInSeqClass.ctrlClass.epilogueSpill)
		peek(c.fabInSeqClass.ctrlClass.iterCount)
		
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.memTypeMatch)
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.memData(0))
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.memData(1))
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.memData(2))
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.iterCnt)
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.io.memData)
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.io.memAddr)
		peek(c.fabInSeqClass.dpClass.fabInSeqMemConfig.io.memOutValid)	
		
		
		peek(c.storeSeqClass.io.inConfig)
		peek(c.storeSeqClass.io.inValid)
		
		peek(c.storeSeqClass.storeCtrlClass.prologueDepth)
		peek(c.storeSeqClass.storeCtrlClass.epilogueDepth)	
		peek(c.storeSeqClass.storeCtrlClass.steadyStateDepth)
		peek(c.storeSeqClass.storeCtrlClass.epilogueSpill)
		peek(c.storeSeqClass.storeCtrlClass.iterCount)
		
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memOutValid)	
		
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memOutValid)
		
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memOutValid)
		
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memOutValid)
	
		
		step(1)
	}
	
	
	for(i<-0 until 30){
		peek(c.mainConfigClass.io.configData)
		peek(c.mainConfigClass.io.configDataValid)
		peek(c.mainConfigClass.configReg)
		peek(c.mainConfigClass.configValidReg)
		
		peek(c.storeSeqClass.io.inConfig)
		peek(c.storeSeqClass.io.inValid)
		
		peek(c.storeSeqClass.storeCtrlClass.prologueDepth)
		peek(c.storeSeqClass.storeCtrlClass.epilogueDepth)	
		peek(c.storeSeqClass.storeCtrlClass.steadyStateDepth)
		peek(c.storeSeqClass.storeCtrlClass.epilogueSpill)
		peek(c.storeSeqClass.storeCtrlClass.iterCount)
		
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.storeSeqMemConfig.io.memOutValid)	
		
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.baseAddrMemConfig.io.memOutValid)
		
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.loopOffsetMemConfig.io.memOutValid)
		
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memData)
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memAddr)
		peek(c.storeSeqClass.storeDPClass.spillOffsetMemConfig.io.memOutValid)
	
		
		step(1)
	}
	bufferedReader.close()
}

object controllerTopMain {
    def main(args: Array[String]) {
	chiselMainTest(Array[String]("--backend", "c", "--genHarness",  "--debug", "--compile", "--test"),
	() => Module(new controllerTop())){c => new controllerTopTest(c)}
    }
}
